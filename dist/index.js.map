{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap e389baab1f74cd40f4e3","webpack:///./src/BasiqConnection.js","webpack:///external \"request\"","webpack:///./src/BasiqUser.js","webpack:///./src/BasiqJob.js","webpack:///./src/index.js","webpack:///./src/BasiqSession.js","webpack:///./src/helpers/API.js","webpack:///./src/errors/Error.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,4B;;;;;;AClNA,oC;;;;;;ACAA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;;AAEA,sB;;;;;;ACzMA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACLA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT,KAAK;AACL;;AAEA,yB;;;;;;ACvFA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qB;;;;;;ACxDA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,uB","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e389baab1f74cd40f4e3","const BasiqJob = require(\"./BasiqJob\");\n\nconst Connection = function (session, user) {\n    if (!session) {\n        throw new Error(\"No session provided\");\n    }\n\n    if (!user) {\n        throw new Error(\"User not initialized\");\n    }\n\n    const self = this;\n\n    self.data = {\n        job: null\n    };\n\n    this.new = function (institutionId, loginId, password, securityCode) {\n        if (!loginId) {\n            throw new Error(\"No user id provided: \" + JSON.stringify(arguments));\n        }\n        if (!password) {\n            throw new Error(\"No password provided: \" + JSON.stringify(arguments));\n        }\n        if (!institutionId) {\n            throw new Error(\"No institution id provided: \" + JSON.stringify(arguments));\n        }\n\n        loginId = loginId.trim();\n        password = password.trim();\n        securityCode = securityCode && securityCode.trim();\n\n        const payload = {\n            loginId: loginId,\n            password: password,\n            institution: {\n                id: institutionId\n            }\n        };\n\n        if (securityCode && securityCode.length > 0) {\n            payload[\"securityCode\"] = securityCode;\n        }\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.data.id + \"/connections\", \"POST\", payload);\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n                (new BasiqJob(session, self)).get(body.id).then(function (job) {\n                    res(job);\n                });\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.get = function (id) {\n        if (!id) {\n            throw new Error(\"No connection id provided: \" + JSON.stringify(arguments));\n        }\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.data.id + \"/connections/\" + id, \"GET\");\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n\n                self.data = body;\n                res(self);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n\n    this.update = function (password, securityCode) {\n        if (!password) {\n            throw new Error(\"No password provided for connection update\");\n        }\n\n        if (!self.institution.id) {\n            throw new Error(\"No institution id set for connection\");\n        }\n\n        const payload = {\n            password: password,\n            institution: {\n                id: self.data.institution.id\n            }\n        };\n\n        if (securityCode && securityCode.length > 0) {\n            payload[\"securityCode\"] = securityCode;\n        }\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.data.id + \"/connections/\" + self.data.id, \"POST\", payload);\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n\n                self.data = body;\n                res(self);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.delete = function () {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.data.id + \"/connections/\" + self.data.id, \"DELETE\");\n            }).then(function () {\n                res(null);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n    \n    this.refresh = function () {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + user.data.id + \"/connections/\" + self.data.id + \"/refresh\", \"POST\");\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n                (new BasiqJob(session, self)).get(body.id).then(function (job) {\n\n                    self.data.job = job;\n                    self.data.id = job.getConnectionId();\n\n                    res(self);\n                });\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.for = function (id, institutionId) {\n        if (!id) {\n            throw new Error(\"No connection id provided\");\n        }\n\n        self.data.id = id;\n\n        if (institutionId) {\n            self.data.institution = {\n                id: institutionId\n            };\n        }\n\n        return self;\n    };\n\n    this.getJobStatus = function () {\n        if (!self.data.job) {\n            throw new Error(\"Job is not initialized\");\n        }\n\n        return self.data.job.refreshJobData();\n    };\n\n    this.canFetchTransactions = async function (reload) {\n        if (!self.data.job) {\n            throw new Error(\"Job is not initialized\");\n        }\n\n        let job;\n\n        if (reload) {\n            job = await self.data.job.refreshJobData();\n        } else {\n            job = self.data.job;\n        }\n\n        return job.getCurrentStep().title === \"retrieve-accounts\" || job.getCurrentStep().title === \"retrieve-transactions\";\n    };\n\n    this.canFetchAccounts = async function (reload) {\n        if (!self.data.job) {\n            throw new Error(\"Job is not initialized\");\n        }\n\n        let job;\n\n        if (reload) {\n            job = await self.data.job.refreshJobData();\n        } else {\n            job = self.data.job;\n        }\n\n        return job.getCurrentStep().title === \"retrieve-accounts\" && job.getCurrentStep().status === \"success\";\n    };\n\n    return this;\n};\n\nmodule.exports = Connection;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/BasiqConnection.js\n// module id = 0\n// module chunks = 0","module.exports = require(\"request\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"request\"\n// module id = 1\n// module chunks = 0","const BasiqConnection = require(\"./BasiqConnection\");\n\nconst User = function (session) {\n    if (!session) {\n        throw new Error(\"No session provided\");\n    }\n\n    const self = this;\n\n    this.data = {\n        id: null,\n        email: null,\n        mobile: null\n    };\n\n    this.new = function (data) {\n        if (data && !data.email && !data.mobile) {\n            throw new Error(\"No email or phone number provided for user\");\n        }\n\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users\", \"POST\", data);\n            }).then(function (body) {\n                self.data = body;\n\n                res(self);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.get = function (id) {\n        if (!id) {\n            throw new Error(\"No id provided for user\");\n        }\n\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + id, \"GET\");\n            }).then(function (body) {\n                self.data = body;\n\n                res(self);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.for = function (id) {\n        if (!id) {\n            throw new Error(\"No id provided for user\");\n        }\n\n        self.data.id = id;\n\n        return self;\n    };\n\n    this.update = function (data) {\n        if (!self.data.id) {\n            throw new Error(\"User has not been initialized\");\n        }\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + self.data.id, \"POST\", data);\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n                self.data.id = body.id;\n                self.data.email = body.email;\n                self.data.mobile = body.mobile;\n\n                res(self);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.delete = function () {\n        if (!self.data.id) {\n            throw new Error(\"User has not been initialized\");\n        }\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + self.data.id, \"DELETE\");\n            }).then(function () {\n                res(true);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.createConnection = function (institutionId, loginId, password, securityCode) {\n        return new BasiqConnection(session, self).new(institutionId, loginId, password, securityCode);\n    };\n\n    this.getAllConnections = function () {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + self.data.id + \"/connections\", \"GET\");\n            }).then(function (body) {\n                if (!body.id) {\n                    rej(body);\n                }\n\n                res(body);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.refreshConnections = function () {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + self.data.id + \"/connections/refresh\", \"POST\");\n            }).then(function (body) {\n                if (!body.data) {\n                    rej(\"Invalid API response: \" + JSON.stringify(body));\n                }\n\n                res(body.data);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.fetchAccounts = function (connectionId) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                let url = \"users/\" + self.data.id + \"/accounts\";\n\n                if (connectionId) {\n                    url += \"?filter=connection.id.eq('\" + connectionId + \"')\";\n                }\n\n                session.API.send(url , \"GET\").then(function (body) {\n                    res(body);\n                }).catch(function (err) {\n                    rej(err);\n                });\n            });\n        });\n    };\n\n    this.fetchAccount = function (accountId) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + self.data.id + \"/accounts/\" + accountId , \"GET\");\n            }).then(function (body) {\n                res(body);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.fetchTransactions = function (connectionId) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                let url = \"users/\" + self.data.id + \"/transactions\";\n\n                if (connectionId) {\n                    url += \"?filter=connection.id.eq('\" + connectionId + \"')\";\n                }\n\n                session.API.send(url , \"GET\").then(function (body) {\n                    res(body);\n                }).catch(function (err) {\n                    rej(err);\n                });\n            });\n        });\n    };\n\n    this.fetchTransaction = function (transactionId) {\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"users/\" + self.data.id + \"/transactions/\" + transactionId , \"GET\");\n            }).then(function (body) {\n                res(body);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    return self;\n};\n\nmodule.exports = User;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/BasiqUser.js\n// module id = 2\n// module chunks = 0","const BasiqConnection = require(\"./BasiqConnection\");\n\nconst Job = function (session, connection) {\n\n    const self = this;\n\n    this.data = {\n        id: null,\n        created: null,\n        updated: null,\n        steps: null,\n        links: null\n    };\n    \n    this.connection = connection;\n\n    this.get = function (id) {\n        if (!id) {\n            throw new Error(\"No job id provided\");\n        }\n\n        return new Promise(function (res, rej) {\n            return session.getToken().then(function () {\n                return session.API.send(\"jobs/\" + id, \"GET\");\n            }).then(function (body) {\n                self.data = body;\n\n                res(self);\n            }).catch(function(err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.refreshJobData = function () {\n        if (!self.data.id) {\n            throw new Error(\"Job is not initialized\");\n        }\n\n        return this.get(self.data.id);\n    };\n\n    this.getCurrentStep = function () {\n        let currentStep = {\n            title: \"uninitialized\"\n        };\n\n        for (let step in self.data.steps) {\n            if (!self.data.steps.hasOwnProperty(step)) {\n                continue;\n            }\n\n            if (self.data.steps[step].status === \"success\") {\n                currentStep = self.data.steps[step];\n            }\n        }\n\n        return currentStep;\n    };\n\n    this.getConnectionId = function () {\n        if (!self.data.links || !self.data.links.source) {\n            return \"\";\n        }\n\n        return self.data.links.source.substr(self.data.links.source.lastIndexOf(\"/\") + 1);\n    };\n\n    this.getConnection = async function () {\n        let connectionId;\n\n        if (self.getConnectionId() === \"\") {\n            const job = await this.get(self.id);\n\n            connectionId = job.getConnectionId();\n        } else {\n            connectionId = self.getConnectionId();\n        }\n        \n        return connection.get(connectionId);\n    };\n\n    this.waitForCredentials = function (interval, timeout) {\n        let job;\n        const start = Date.now();\n\n        return new Promise(async function (res, rej) {\n            const check = async function (i) {\n                if (Date.now() - start > timeout * 1000) {\n                    return rej({\n                        error: true,\n                        errorMessage: \"The operation has timed out\"\n                    });\n                }\n                if (i > 0) {\n                    job = await self.refreshJobData();\n                } else {\n                    job = self;\n                }\n                const credentialsStep = job.data.steps && job.data.steps[0];\n\n                if (credentialsStep.status && credentialsStep.status !== \"in-progress\" && credentialsStep.status !== \"pending\") {\n                    if (credentialsStep.status === \"success\") {\n                        return res(connection.get(self.getConnectionId()));\n                    }\n\n                    return res(null);\n                }\n\n                setTimeout(check.bind(null, ++i), interval);\n            };\n\n            setTimeout(check.bind(null, 0), 0);\n        });\n    };\n};\n\nmodule.exports = Job;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/BasiqJob.js\n// module id = 3\n// module chunks = 0","module.exports = {\n    BasiqSession: require(\"./BasiqSession\"),\n    BasiqUser: require(\"./BasiqUser\"),\n    BasiqConnection: require(\"./BasiqConnection\"),\n    BasiqJob: require(\"./BasiqJob\")\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 4\n// module chunks = 0","const API = require(\"./helpers/API\"),\n    BasiqUser = require(\"./BasiqUser\");\n\nconst Session = function (apiKey) {\n    if (!this) {\n        return new Session(apiKey);\n    }\n\n    let token = null;\n\n    const self = this;\n\n    this.sessionTimestamp = null;\n\n    this.API = (new API(\"https://au-api.basiq.io\")).setHeader(\"Authorization\", \"Basic \" + apiKey).setHeader(\"basiq-version\", \"1.0\");\n\n    this.expired = function () {\n        return Date.now() - self.sessionTimestamp > 1000 * 60 * 60;\n    };\n\n    this.getToken = function () {\n        if (!self.expired()) {\n            return new Promise(function (res) {\n                res(true);\n            });\n        }\n\n        return new Promise(function (res, rej) {\n            return self.API.setHeader(\"Authorization\", \"Basic \" + apiKey).send(\"oauth2/token\", \"POST\", {\n                \"grant_type\": \"client_credentials\"\n            }).then(function (body) {\n                self.sessionTimestamp = Date.now();\n                token = body.access_token;\n                self.API.setHeader(\"Authorization\", \"Bearer \" + body.access_token);\n\n                res(true);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.createUser = function (data) {\n        return new BasiqUser(self).new(data);\n    };\n\n    this.getUser = function (id) {\n        return new BasiqUser(self).get(id);\n    };\n\n    this.forUser = function (id) {\n        return new BasiqUser(self).for(id);\n    };\n\n    this.getInstitutons = function () {\n        return new Promise(function (res, rej) {\n            return self.getToken().then(function () {\n                return self.API.send(\"institutions\" , \"GET\");\n            }).then(function (body) {\n                res(body);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    this.getInstituton = function (institutionId) {\n        return new Promise(function (res, rej) {\n            return self.getToken().then(function () {\n                return self.API.send(\"institutions/\" + institutionId , \"GET\");\n            }).then(function (body) {\n                res(body);\n            }).catch(function (err) {\n                rej(err);\n            });\n        });\n    };\n\n    return new Promise(function (res, rej) {\n        self.getToken().then(function () {\n            res(self);\n        }).catch(function (err) {\n            rej(err);\n        });\n    });\n};\n\nmodule.exports = Session;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/BasiqSession.js\n// module id = 5\n// module chunks = 0","const request = require(\"request\"),\n    Error = require(\"../errors/Error\");\n\nrequire(\"request\").debug = true;\n\nconst API = function(host) {\n    this.options = {\n        host: host,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n    };\n\n    return this;\n};\n\nAPI.prototype.setHeader = function (header, value) {\n    this.options.headers[header] = value;\n\n    return this;\n};\n\nAPI.prototype.send = function (path, method, data) {\n    const options = {};\n    options.uri = this.options.host + \"/\" + path;\n    options.method = method.toUpperCase();\n    options.headers = cloneObject(this.options.headers);\n\n    if (data) {\n        options.body = JSON.stringify(data);\n        options.headers[\"Content-Length\"] = options.body.length;\n    }\n\n    return new Promise(function (res, rej) {\n        request(options, function (error, response, body) {\n            if (error || response.statusCode > 299) {\n                if (error) {\n                    return rej(error);\n                } else {\n                    return rej(new Error(body, response.statusCode));\n                }\n            }\n            res(JSON.parse(body));\n        });\n    });\n};\n\nfunction cloneObject(obj) {\n    if (null === obj || \"object\" !== typeof obj) return obj;\n    const copy = obj.constructor();\n    for (let attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n    }\n    return copy;\n}\n\nmodule.exports = API;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/helpers/API.js\n// module id = 6\n// module chunks = 0","function Error(body, statusCode) {\n    if (this === undefined) {\n        return new Error(body, statusCode);\n    }\n\n    if (typeof body === \"object\") {\n        return body;\n    }\n\n    let data;\n\n    try {\n        data = JSON.parse(body);\n    } catch (e) {\n        return e;\n    }\n\n    this.statusCode = statusCode;\n    this.response = data;\n    this.message = data.data.reduce(function (acc, curr) {\n        return acc += curr.detail + \" \";\n    }, \"\").trim();\n}\n\nmodule.exports = Error;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/errors/Error.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}